{
  "hash": "942bea54d9c8ca7b6f9f2f5e38a75da1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"🎧 Vibe Coding My Portfolio\"\nauthor: \"Lydia Hsu\"\ndate: \"2025-04-15\"\ncategories: [Vibe Coding, Prompt Engineering, Dev Workflow]\nimage: \"../images/posts/vibecoding.jpg\"\ndescription: \"How I built my portfolio site using vibe coding: an AI-assisted, prompt-powered approach.\"\nformat:\n  html:\n    code-fold: false\n    code-tools: false\nexecute:\n  echo: true\n  output: true\n  warning: true\n  error: true\nengine: knitr\n---\n\n\n\n## 🎧 What *Is* Vibe Coding?{.no-anchor}\n\nCoined by Andrej Karpathy in 2025, **vibe coding** is a new style of AI-assisted development where you co-create software through natural language prompts.  \nYou describe what you want — layout, logic, behavior — and let the AI generate most of the code. Your role becomes guiding, reviewing, and refining.  \n\nIt's fast. It's iterative. And when you're in the zone, it's incredibly fun.\n\n\n\n## 🛠️ How I Vibe-Coded This Portfolio{.no-anchor}\n\nWhen I set out to build this site with **Quarto**, I fully embraced vibe coding — powered by **Cursor**, an AI-first code editor that made the experience even smoother. Here’s how I turned ideas into reality.\n\n### 🎨 Starting with Style{.no-anchor}\n\nBefore writing a single line of prompt, I first picked a color palette and visual style that felt right: clean, playful, and pastel-toned.  \nThis upfront design choice gave me a clear target to guide the vibe of every prompt I wrote.\n\n### 🔁 From Prompt to Preview{.no-anchor}\n\nWith the style in mind, I fed Cursor detailed prompts like:\n\n> \"Create a responsive Quarto page with a two-column layout: left for project cards, right for an About Me section. Add a sticky navbar.\"\n\nIn response, the AI generated 100+ lines of YAML and HTML.  \nMy role became:\n\n- Cleaning up the structure\n- Extracting inline CSS into a clean \"custom.scss\"\n- Debugging Quarto-specific quirks\n\n### ⚡ Instant Components{.no-anchor}\n\nUsing Cursor, I quickly scaffolded:\n\n- A vibrant hero section\n- A filterable project grid\n- An interactive skills accordion\n\nThen I fine-tuned layouts and interactivity using Quarto's chunk options, Bootstrap classes, and SCSS variables.\n\n### ✏️ Rapid Theming with Prompts{.no-anchor}\n\nTo shape the visual identity further, I prompt-tuned with design intent:\n\n> \"Make the call-to-action button playful with a pastel palette and rounded corners.\"\n\nThis let me explore different design variants in minutes — no tedious manual CSS editing.\n\n\n\n## 📚 Key Lessons Learned{.no-anchor}\n\n| 💡 Lesson | Takeaway |\n|-----------|----------|\n| Prompting is a design skill | Clear, specific context = better AI output |\n| AI isn't always right | Some hallucinated Quarto options needed manual fixes |\n| Human + AI = magic | UX sense and technical intuition still matter |\n\n\n\n## 🧩 Challenges I Hit (and How I Solved Them){.no-anchor}\n\n| ❌ Challenge | ✅ Solution |\n|--------------|------------|\n| Code chunks broke layout | Used `freeze: true` and scoped JS imports |\n| CSS conflicts | Consolidated class names, offloaded critical styles to `custom.scss` |\n| Mixed audience (Product + Data) | Added skill filters and tabs for easy navigation |\n\n\n\n## ✨ Why This Project Mattered{.no-anchor}\n\nBuilding this site wasn't just technical — it was creative, almost meditative.  \nIt showed me that AI can enhance not just productivity, but also playfulness.  \n\nThis portfolio reflects who I am: a builder who loves clean data, smart design, and continuous learning.\n\n\n\n## 🤝🏼 Let's Connect{.no-anchor}\n\nIf you're experimenting with AI-assisted portfolios, playing with Quarto, or exploring what vibe coding looks like — I’d love to hear your story.\n\nLet’s swap prompts, share inspiration, or build a lo-fi coding playlist together.\n\n[📬 Let’s chat](mailto:lydia.tzuchi@gmail.com){.btn .btn-primary}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}