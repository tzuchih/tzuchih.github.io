---
title: "Building a Job Rec System"
author: "Lydia Hsu"
date: "2025-03-20"
page-title: "Lydia's Portfolio"
document-title: "Lydia's Portfolio"
categories: [Python, NLP, NLTK, Scikit-learn, Streamlit]
image: "../images/posts/jobrec.jpg"
description: |
 [Check out this project on my Github](https://github.com/tzuchih/Building-a-Job-Rec-System)<br/>
 This project is where natural language processing meets career search! I worked as the **data scientist** in the team and designed a job recommendation system that helps users identify roles aligned with their skills, straight from their uploaded resume. Built using Streamlit, the app leverages classic NLP techniques and custom logic to deliver fast, personalized results.
format:
  html:
    code-fold: false
    code-tools: false
    code-block-border-left: false
    code-line-numbers: false
    code-copy: false
    highlight-style: github
    fig-responsive: true
    margin-top: "0"
    margin-bottom: "0"
    title-block-style: default
---

<style>
/* Hide mermaid code blocks but keep diagrams visible */
.sourceCode.mermaid {
  display: none !important;
  visibility: hidden !important;
  height: 0 !important;
  opacity: 0 !important;
  margin: 0 !important;
  padding: 0 !important;
  overflow: hidden !important;
}

/* Allow the diagram to be rendered */
.job-rec-diagram .mermaid {
  display: block !important;
  visibility: visible !important;
  opacity: 1 !important;
  height: auto !important;
  margin: 2rem auto !important;
}

/* Ensure code blocks for mermaid don't show */
div.sourceCode:has(.mermaid) {
  display: none !important; 
  height: 0 !important;
  opacity: 0 !important;
  overflow: hidden !important;
  margin: 0 !important;
  padding: 0 !important;
}

/* Hide code block titles for mermaid */
div.sourceCode:has(.mermaid)::before,
div.sourceCode:has(.mermaid)::after {
  display: none !important;
}
</style>

<!-- Ensure mermaid library is loaded -->
<script src="https://cdn.jsdelivr.net/npm/mermaid@10.3.1/dist/mermaid.min.js"></script>
<script>
// Initialize mermaid with custom configuration
document.addEventListener('DOMContentLoaded', function() {
  mermaid.initialize({
    startOnLoad: true,
    theme: 'default',
    securityLevel: 'loose',
    themeVariables: {
      primaryColor: '#999999',
      primaryTextColor: '#333333',
      primaryBorderColor: '#777777',
      lineColor: '#555555',
      secondaryColor: '#f4f4f4',
      tertiaryColor: '#ffffff'
    },
    flowchart: {
      htmlLabels: true,
      curve: 'basis'
    }
  });
  
  // Force render any mermaid diagrams
  setTimeout(function() {
    mermaid.init(undefined, '.mermaid:not(pre):not(code)');
  }, 500);
});
</script>

<br/>

## ‚ú® Key Features for Users{.no-anchor}
- #### Quick Resume Upload{.no-anchor}
Users can upload their resumes in PDF or DOCX format with just one click‚Äîno formatting or manual input required.

- #### Personalized Job Matches{.no-anchor}
The system automatically recommends job listings that closely align with the user's skills, experience, and preferences.

- #### Custom Filters{.no-anchor}
Users can filter job recommendations by location, role, industry, or keywords to tailor results to their career goals.

- #### Top 5 Matching Jobs{.no-anchor}
See your top 5 most relevant job opportunities based on resume-job fit, sorted by similarity score.

- #### Skill Gap Insights{.no-anchor}
Instantly view which required skills are missing from your resume, so you can focus on improving them or tailoring your r√©sum√© more effectively.

- #### One-Click Cover Letter Draft{.no-anchor}
Choose a job listing, and the system will generate a personalized cover letter draft‚Äîsaving time and boosting your application quality.


## üìà Result and Flow Chart{.no-anchor}

#### The user interface of the system:

![](../../images/posts/nlpsystem.jpg)

#### The process flow of the system:

<div style="width:100%; max-width:800px; margin:0 auto;">
<!-- Primary option: iframe with mermaid diagram -->
<iframe src="../posts/job-rec-diagram.html" width="100%" height="900px" frameborder="0" scrolling="no" style="border:none; overflow:hidden;"></iframe>

<!-- Fallback option: if iframe doesn't work -->
<div style="text-align:center; display:none;">
![Job Recommendation System Flowchart](../../images/posts/job-rec-diagram.png)
</div>
</div>

## üì¶ Dataset{.no-anchor}

The job listing dataset was sourced from Kaggle and contains 1.3 million job listings scraped from LinkedIn in the year 2024, including skill requirements, and metadata such as job level, country, and type. I further enriched and cleaned the dataset to make it suitable for text vectorization and matching.

## üß† How It Works Behind the Scenes{.no-anchor}

### 1. Resume Parsing{.no-anchor}
Users upload a resume (PDF or DOCX), and I use pdfminer and python-docx to extract raw text. This ensures the system can handle a wide range of formatting.

### 2. Text Preprocessing{.no-anchor}
A custom clean_text() function prepares the text by:

  - Lowercasing all characters
  - Removing numbers and punctuation
  - Tokenizing the text
  - Removing stopwords with NLTK
  - Lemmatizing each token

This helps standardize the content from both resumes and job descriptions.

### 3. Data Preparation{.no-anchor}
Each job posting is processed by merging its title and required skills into one text field, which then undergoes the same cleaning pipeline for consistency.

### 4. TF-IDF Vectorization{.no-anchor}
I apply TF-IDF with bi-grams, sublinear term frequency, and smoothing to convert the cleaned text into numerical vectors. This approach highlights important skills and phrases while minimizing noise.

```python
def get_vectorizer_and_vectors(job_data):
    """Caches the TF-IDF vectorizer and job text embeddings."""
    vectorizer = TfidfVectorizer(stop_words='english', ngram_range=(1,2), smooth_idf=True, sublinear_tf=True)
    
    if not job_data.empty:
        job_vectors = vectorizer.fit_transform(job_data['clean_text'])
    else:
        job_vectors = None  # Prevents errors if no jobs exist
    
    return vectorizer, job_vectors
```


### 5. Cosine Similarity Matching{.no-anchor}
The resume vector is compared against all job vectors using cosine similarity, generating a match score. To improve interpretability, I normalize the similarity scores to a 0‚Äì100 scale.

### 6. Filtering Options{.no-anchor}
Users can filter jobs by:

  üåé Country, üíº Job Level, üè† Job Type (Onsite, Remote, or Hybrid)

Only filtered jobs are vectorized‚Äîmaking the system both efficient and responsive.

### 7. Skill Gap Analysis{.no-anchor}
Each job match also includes:

  ‚úÖ Matched Skills you already have

  ‚ùå Missing Skills to work on

This makes recommendations actionable for job seekers.

### 8. Cover Letter Generator{.no-anchor}
Select a job, click a button, and the system drafts a personalized cover letter based on the role, skills, and company‚Äîgreat for quickly tailoring applications.

## ‚öôÔ∏è Tools & Libraries{.no-anchor}

- Python, Streamlit, Pandas, NumPy
- NLTK for text processing
- Scikit-learn for TF-IDF & similarity computation
- pdfminer.six & python-docx for file parsing
- Kaggle job dataset (custom cleaned)

## üí° What I Gained{.no-anchor}
This project combined everything I love‚Äîdata wrangling, NLP, real-world problem solving, and user-centered design. It strengthened my skills in building scalable pipelines, working with unstructured data, and developing applications that turn insight into action.


